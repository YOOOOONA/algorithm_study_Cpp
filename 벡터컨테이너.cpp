//벡터 컨테이너는 동적 배열로 구현되는데, 보통의 배열 처럼 벡터 컨테이너들도 각각의 원소들이 메모리 상에서 연속적으로 존재하게 된다. 이 때문에 벡터 컨테이너의 원소를 참조할 때 반복자(iterator) 을 이용해서 순차적으로 참조할 수 있고, 처음 원소의 부터의 상대적인 거리를 이용하여 접근할 수 도 있다.
// 하지만, 보통의 배열과는 달리 벡터 컨테이너는 스스로 공간을 할당하고, 크기를 확장할 수 있고, 또 줄일 수 도 있다.
// 벡터 컨테이너는 아래와 같은 장점을 가지고 있다.
//  -각각의 원소를 원소의 인덱스(index) 값으로 바로 참조 가능하다 (상수 시간이 소요)
//  -원소들을 임의의 순서로 접근할 수 있다. (선형 시간 소요)
//  -벡터 끝에 새로운 원소를 추가하거나 제거하기 (상수 시간 소요 - constant amortized time)

//벡터는 배열이 제공하는 거의 모든 기능을 다 가지고 있다. 게다가, 벡터 컨테이너의 크기는 쉽게 조정될 수 있기 때문에 매우 용이하다. 하지만 이러한 장점들 때문에 보통의 배열보다 더 많은 메모리 공간을 필요로 한다는 단점이 있다.
//양 끝에 추가삭제는 벡터가 우세, 중간에 추가삭제하는건 deque,list가 우세
//벡터size가 capacity를 넘어가면 자동으로 capacity가 두배가 되는 메모리할당이 이뤄지긴하지만 시간을 많이 잡는 일이므로 처음에 많이 할당해놓는게 좋음