다른 표준 순차 컨테이너 (vector, deque) 와 비교했을 때, 리스트는 원소의 삽입, 삭제, 그리고 컨테이너 내부에서의 
원소들 간의 이동이 매우 효율적이다. 따라서 정렬 알고리즘 처럼 원소의 이동이 빈번하게 일어나는 곳에 적용하면 효율적이다.
 특히 list::sort 함수와, 원소 이동 관련한 함수가 list::splice 가 기본적으로 제공되어서 편리하다.

하지만 리스트의 가장 큰 문제점은 원소들을 "인덱스로 직접 참조하는 것"이 비효율적이라는 것이다. 예를 들어서 리스트의
 6 번째 원소를 참조하기 위해서는 리스트의 시작 부분으로 부터 링크를 하나씩 돌면서 찾아 나가야 한다.

뿐만 아니라, 링크 되는 다른 원소의 주소값을 보관해야 하기 때문에 추가적인 메모리가 사용된다는 것인데, 보관하는 원소에
 크기가 작을 수 록 배보다 배꼽이 더 커지는 현상이 발생하게 된다. (원소의 주소값은 4 바이트인데, 보관하는 것은 1 바이트 
 원소라면 전체 메모리 사용의 80% 가 단순히 다음 원소의 주소값을 보관하는데 낭비된다)

template <class T, class Allocator = allocator<T> >
class list;